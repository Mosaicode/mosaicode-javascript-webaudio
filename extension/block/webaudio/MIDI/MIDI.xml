<?xml version="1.0" encoding="utf-8"?>
<MosaicodeBlock color="250:250:0:150" extension="webaudio" group="MIDI" help="MIDI" label="MIDI" language="javascript" type="mosaicode_lib_javascript_webaudio.extensions.blocks.MIDI.MIDI">
 <function value="
// request MIDI access

if (navigator.requestMIDIAccess) {
    navigator.requestMIDIAccess({sysex: false}).then(MidiSuccess, MidiFailure);
} else {
    alert(&quot;No MIDI support in your browser.&quot;);
}

// midi functions
function MidiSuccess(midi) {
    // when we get a succesful response, run this code
    console.log('MIDI Access Object', midi);
    var inputs = midi.inputs.values();

    for (var input = inputs.next(); input &amp;&amp; !input.done; input = inputs.next()) {
        // each time there is a midi message call the onMIDIMessage function
        input.value.onmidimessage = MidiMessage;
    }
}

function MidiFailure(e) {
    // when we get a failed response, run this code
    message = &quot;No access to MIDI devices or your browser doesn't support WebMIDI API. Please use WebMIDIAPIShim &quot; + e;
    console.log(message);
    alert(message);
}

// Variable to keep output ports
var note_output = [];
var control_output = [];

function MidiMessage (message) {
    //Note On
    if((message.data[0] == 144 &amp;&amp; message.data[2] &gt; 0) ||
    // Note Off
    (message.data[0] === 128 || (message.data[0] == 144 &amp;&amp; message.data[2] === 0))
    ){
        for (var i = 0; i &lt; note_output.length ; i++)
            for (var j = 0; j &lt; note_output[i].length ; j++)
                    note_output[i][j]([message.data[1],message.data[2]]);
    }


    //Ctrl
    if (message.data[0] === 176 ){
        for (var i = 0; i &lt; control_output.length ; i++)
            for (var j = 0; j &lt; control_output[i].length ; j++)
                    control_output[i][j]([message.data[1],message.data[2]]);
    }
    // Not used
    // (message.data[0] === 176 )//Drum pad
    // (message.data[0] === 208 )//Aftertouch
}


"/>
 <declaration value="
// block_$id$ = Mouse
var $port[note]$ = [];
var $port[control]$ = [];
note_output.push($port[note]$);
control_output.push($port[control]$);
"/>
 <properties/>
 <ports>
  <port conn_type="output" label="Note" name_="note" type_="mosaicode_lib_javascript_webaudio.extensions.ports.midi"/>
  <port conn_type="output" label="Control" name_="control" type_="mosaicode_lib_javascript_webaudio.extensions.ports.midi"/>
 </ports>
</MosaicodeBlock>